{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>I hope this documentation is helpful for you, but don't just Ctrl+C and Ctrl+V.</p> <p>A package to suit your non-blocking PS4 interface</p> <p>AsynchronousPS4Controller is the product when I did a project that needed an asynchronous interface with multiple PS4 controllers</p>"},{"location":"#key-features","title":"Key Features","text":"<p>AsynchronousPS4Controller offers:</p> <ul> <li>An asynchronous way to connect your PS4 to your Python Program</li> <li>Connect multiple Controllers in a single code</li> </ul>"},{"location":"#where-do-i-start","title":"Where do I start?","text":"<p>Getting started with AsynchronousPS4Controller is easy! Simply install it via <code>pip</code> using either one of these commands:</p> <ul> <li><code>python -m pip install AsynchronousPS4Controller</code></li> <li><code>python3 -m pip install AsynchronousPS4Controller</code></li> <li><code>pip install AsynchronousPS4Controller</code></li> <li><code>pip3 install AsynchronousPS4Controller</code></li> </ul> <p>Connect your PS4 either wired or through Bluetooth  and start building your PS4 program in Python: <pre><code>import asyncio\nfrom AsynchronousPS4Controller import Controller\n\ncontroller = Controller(path=\"/dev/input/js0\")\n\n# you can start listening before controller is paired, as long as you pair it within the timeout window\nasyncio.run(controller.listen(timeout=30))\n</code></pre></p>"},{"location":"changelog/","title":"Changelog","text":"<p>Here you can find the changelog for the library. This is a list of all the changes that have been made to the library. In breaking changes, the breaking change is signified by a <code>\ud83d\udca5</code></p>"},{"location":"changelog/#release-010-sep-13-2023","title":"Release 0.1.0 - Sep 13, 2023","text":""},{"location":"changelog/#whats-new","title":"What's New","text":"<ul> <li>ci: Changed the Python Dependency to 3.9</li> </ul>"},{"location":"changelog/#whats-fixed","title":"What's Fixed","text":"<ul> <li>fix: Laggy Response for Analog Buttons</li> <li>fix: Re-connection of PS4 causes Permission Error</li> </ul> <p>Full Changelog: Link</p>"},{"location":"API%20Refrences/API%20Refrences/Controller/","title":"Controller","text":""},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController","title":"<code>BaseController</code>","text":"<p>Base Controller class for Controllers</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>class BaseController:\n\"\"\"\n    Base Controller class for Controllers\n    \"\"\"\n\n    def __init__(self):\n        return\n\n    async def on_x_press(self):\n\"\"\"\n        Function that is runned when x button is pressed\n        \"\"\"\n        print(\"on_x_press\")\n\n    async def on_x_release(self):\n\"\"\"\n        Function that is runned when x button is released\n        \"\"\"\n        print(\"on_x_release\")\n\n    async def on_triangle_press(self):\n\"\"\"\n        Function that is runned when triangle button is pressed\n        \"\"\"\n        print(\"on_triangle_press\")\n\n    async def on_triangle_release(self):\n\"\"\"\n        Function that is runned when triangle button is released\n        \"\"\"\n        print(\"on_triangle_release\")\n\n    async def on_circle_press(self):\n\"\"\"\n        Function that is runned when circle button is pressed\n        \"\"\"\n        print(\"on_circle_press\")\n\n    async def on_circle_release(self):\n\"\"\"\n        Function that is runned when circle button is released\n        \"\"\"\n        print(\"on_circle_release\")\n\n    async def on_square_press(self):\n\"\"\"\n        Function that is runned when square button is pressed\n        \"\"\"\n        print(\"on_square_press\")\n\n    async def on_square_release(self):\n\"\"\"\n        Function that is runned when square button is released\n        \"\"\"\n        print(\"on_square_release\")\n\n    async def on_L1_press(self):\n\"\"\"\n        Function that is runned when L1 button is pressed\n        \"\"\"\n        print(\"on_L1_press\")\n\n    async def on_L1_release(self):\n\"\"\"\n        Function that is runned when L1 button is released\n        \"\"\"\n        print(\"on_L1_release\")\n\n    async def on_L2_press(self, value: int):\n\"\"\"\n        Function that is runned when L2 button is released\n\n        Args:\n            value: The analog value of how hard the button is pressed.\n        \"\"\"\n        print(f\"on_L2_press: {value}\")\n\n    async def on_L2_release(self):\n\"\"\"\n        Function that is runned when L2 button is released\n        \"\"\"\n        print(\"on_L2_release\")\n\n    async def on_R1_press(self):\n\"\"\"\n        Function that is runned when R1 button is pressed\n        \"\"\"\n        print(\"on_R1_press\")\n\n    async def on_R1_release(self):\n\"\"\"\n        Function that is runned when R1 button is released\n        \"\"\"\n        print(\"on_R1_release\")\n\n    async def on_R2_press(self, value: int):\n\"\"\"\n        Function that is runned when R2 button is released\n\n        Args:\n            value: The analog value of how hard the button is pressed.\n        \"\"\"\n        print(f\"on_R2_press: {value}\")\n\n    async def on_R2_release(self):\n\"\"\"\n        Function that is runned when R2 button is released\n        \"\"\"\n        print(\"on_R2_release\")\n\n    async def on_up_arrow_press(self):\n\"\"\"\n        Function that is runned when Up button is pressed\n        \"\"\"\n        print(\"on_up_arrow_press\")\n\n    async def on_down_arrow_press(self):\n\"\"\"\n        Function that is runned when Down button is pressed\n        \"\"\"\n        print(\"on_down_arrow_press\")\n\n    async def on_up_down_arrow_release(self):\n\"\"\"\n        Function that is runned when Up or Down arrow button is released\n        \"\"\"\n        print(\"on_up_down_arrow_release\")\n\n    async def on_left_arrow_press(self):\n\"\"\"\n        Function that is runned when Left arrow button is pressed\n        \"\"\"\n        print(\"on_left_arrow_press\")\n\n    async def on_right_arrow_press(self):\n\"\"\"\n        Function that is runned when Right button is pressed\n        \"\"\"\n        print(\"on_right_arrow_press\")\n\n    async def on_left_right_arrow_release(self):\n\"\"\"\n        Function that is runned when button is released\n        \"\"\"\n        print(\"on_left_right_arrow_release\")\n\n    async def on_L3_up(self, value: int):\n\"\"\"\n        Function that is runned when Left Joystick (L3) is pushed up\n\n        Args:\n            value: The analog value of joystick that is pushed away from origin\n        \"\"\"\n        print(f\"on_L3_up: {value}\")\n\n    async def on_L3_down(self, value: int):\n\"\"\"\n        Function that is runned when Left Joystick (L3) is pushed down\n\n        Args:\n            value: The analog value of joystick that is pushed away from origin\n        \"\"\"\n        print(f\"on_L3_down: {value}\")\n\n    async def on_L3_left(self, value: int):\n\"\"\"\n        Function that is runned when Left Joystick (L3) is pushed left\n\n        Args:\n            value: The analog value of joystick that is pushed away from origin\n        \"\"\"\n        print(f\"on_L3_left: {value}\")\n\n    async def on_L3_right(self, value: int):\n\"\"\"\n        Function that is runned when Left Joystick (L3) is pushed right\n\n        Args:\n            value: The analog value of joystick that is pushed away from origin\n        \"\"\"\n        print(f\"on_L3_right: {value}\")\n\n    async def on_L3_y_at_rest(self):\n\"\"\"\n        Function that is runned when Left Joystick (L3) returns to the y-axis\n        \"\"\"\n        print(\"on_L3_y_at_rest\")\n\n    async def on_L3_x_at_rest(self):\n\"\"\"\n        Function that is runned when Left Joystick (L3) returns to the x-axis\n        \"\"\"\n        print(\"on_L3_x_at_rest\")\n\n    async def on_L3_press(self):\n\"\"\"\n        Function that is runned when Left Joystick (L3) button is pressed\n        \"\"\"\n        print(\"on_L3_press\")\n\n    async def on_L3_release(self):\n\"\"\"\n        Function that is runned when Left Joystick (L3) button is released\n        \"\"\"\n        print(\"on_L3_release\")\n\n    async def on_R3_up(self, value: int):\n\"\"\"\n        Function that is runned when Right Joystick (R3) is pushed up\n\n        Args:\n            value: The analog value of joystick that is pushed away from origin\n        \"\"\"\n        print(f\"on_R3_up: {value}\")\n\n    async def on_R3_down(self, value: int):\n\"\"\"\n        Function that is runned when Right Joystick (R3) is pushed down\n\n        Args:\n            value: The analog value of joystick that is pushed away from origin\n        \"\"\"\n        print(f\"on_R3_down: {value}\")\n\n    async def on_R3_left(self, value: int):\n\"\"\"\n        Function that is runned when Right Joystick (R3) is pushed left\n\n        Args:\n            value: The analog value of joystick that is pushed away from origin\n        \"\"\"\n        print(f\"on_R3_left: {value}\")\n\n    async def on_R3_right(self, value: int):\n\"\"\"\n        Function that is runned when Right Joystick (R3) is pushed right\n\n        Args:\n            value: The analog value of joystick that is pushed away from origin\n        \"\"\"\n        print(f\"on_R3_right: {value}\")\n\n    async def on_R3_y_at_rest(self):\n\"\"\"\n        Function that is runned when Right Joystick (R3) returns to the y-axis\n        \"\"\"\n        print(\"on_R3_y_at_rest\")\n\n    async def on_R3_x_at_rest(self):\n\"\"\"\n        Function that is runned when Right Joystick (R3) returns to the x-axis\n        \"\"\"\n        print(\"on_R3_x_at_rest\")\n\n    async def on_R3_press(self):\n\"\"\"\n        Function that is runned when Right Joystick (R3) button is pressed\n        \"\"\"\n        print(\"on_R3_press\")\n\n    async def on_R3_release(self):\n\"\"\"\n        Function that is runned when Right Joystick (R3) button is released\n        \"\"\"\n        print(\"on_R3_release\")\n\n    async def on_options_press(self):\n\"\"\"\n        Function that is runned when Options button is pressed\n        \"\"\"\n        print(\"on_options_press\")\n\n    async def on_options_release(self):\n\"\"\"\n        Function that is runned when Options button is released\n        \"\"\"\n        print(\"on_options_release\")\n\n    async def on_share_press(self):\n\"\"\"\n        Function that is runned when share button is pressed\n        \"\"\"\n        print(\"on_share_press\")\n\n    async def on_share_release(self):\n\"\"\"\n        Function that is runned when share button is released\n        \"\"\"\n        print(\"on_share_release\")\n\n    async def on_playstation_button_press(self):\n\"\"\"\n        Function that is runned when playstation button is pressed\n        \"\"\"\n        print(\"on_playstation_button_press\")\n\n    async def on_playstation_button_release(self):\n\"\"\"\n        Function that is runned when playstation button is released\n        \"\"\"\n        print(\"on_playstation_button_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L1_press","title":"<code>on_L1_press()</code>  <code>async</code>","text":"<p>Function that is runned when L1 button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L1_press(self):\n\"\"\"\n    Function that is runned when L1 button is pressed\n    \"\"\"\n    print(\"on_L1_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L1_release","title":"<code>on_L1_release()</code>  <code>async</code>","text":"<p>Function that is runned when L1 button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L1_release(self):\n\"\"\"\n    Function that is runned when L1 button is released\n    \"\"\"\n    print(\"on_L1_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L2_press","title":"<code>on_L2_press(value)</code>  <code>async</code>","text":"<p>Function that is runned when L2 button is released</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The analog value of how hard the button is pressed.</p> required Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L2_press(self, value: int):\n\"\"\"\n    Function that is runned when L2 button is released\n\n    Args:\n        value: The analog value of how hard the button is pressed.\n    \"\"\"\n    print(f\"on_L2_press: {value}\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L2_release","title":"<code>on_L2_release()</code>  <code>async</code>","text":"<p>Function that is runned when L2 button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L2_release(self):\n\"\"\"\n    Function that is runned when L2 button is released\n    \"\"\"\n    print(\"on_L2_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L3_down","title":"<code>on_L3_down(value)</code>  <code>async</code>","text":"<p>Function that is runned when Left Joystick (L3) is pushed down</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The analog value of joystick that is pushed away from origin</p> required Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L3_down(self, value: int):\n\"\"\"\n    Function that is runned when Left Joystick (L3) is pushed down\n\n    Args:\n        value: The analog value of joystick that is pushed away from origin\n    \"\"\"\n    print(f\"on_L3_down: {value}\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L3_left","title":"<code>on_L3_left(value)</code>  <code>async</code>","text":"<p>Function that is runned when Left Joystick (L3) is pushed left</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The analog value of joystick that is pushed away from origin</p> required Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L3_left(self, value: int):\n\"\"\"\n    Function that is runned when Left Joystick (L3) is pushed left\n\n    Args:\n        value: The analog value of joystick that is pushed away from origin\n    \"\"\"\n    print(f\"on_L3_left: {value}\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L3_press","title":"<code>on_L3_press()</code>  <code>async</code>","text":"<p>Function that is runned when Left Joystick (L3) button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L3_press(self):\n\"\"\"\n    Function that is runned when Left Joystick (L3) button is pressed\n    \"\"\"\n    print(\"on_L3_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L3_release","title":"<code>on_L3_release()</code>  <code>async</code>","text":"<p>Function that is runned when Left Joystick (L3) button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L3_release(self):\n\"\"\"\n    Function that is runned when Left Joystick (L3) button is released\n    \"\"\"\n    print(\"on_L3_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L3_right","title":"<code>on_L3_right(value)</code>  <code>async</code>","text":"<p>Function that is runned when Left Joystick (L3) is pushed right</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The analog value of joystick that is pushed away from origin</p> required Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L3_right(self, value: int):\n\"\"\"\n    Function that is runned when Left Joystick (L3) is pushed right\n\n    Args:\n        value: The analog value of joystick that is pushed away from origin\n    \"\"\"\n    print(f\"on_L3_right: {value}\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L3_up","title":"<code>on_L3_up(value)</code>  <code>async</code>","text":"<p>Function that is runned when Left Joystick (L3) is pushed up</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The analog value of joystick that is pushed away from origin</p> required Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L3_up(self, value: int):\n\"\"\"\n    Function that is runned when Left Joystick (L3) is pushed up\n\n    Args:\n        value: The analog value of joystick that is pushed away from origin\n    \"\"\"\n    print(f\"on_L3_up: {value}\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L3_x_at_rest","title":"<code>on_L3_x_at_rest()</code>  <code>async</code>","text":"<p>Function that is runned when Left Joystick (L3) returns to the x-axis</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L3_x_at_rest(self):\n\"\"\"\n    Function that is runned when Left Joystick (L3) returns to the x-axis\n    \"\"\"\n    print(\"on_L3_x_at_rest\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_L3_y_at_rest","title":"<code>on_L3_y_at_rest()</code>  <code>async</code>","text":"<p>Function that is runned when Left Joystick (L3) returns to the y-axis</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_L3_y_at_rest(self):\n\"\"\"\n    Function that is runned when Left Joystick (L3) returns to the y-axis\n    \"\"\"\n    print(\"on_L3_y_at_rest\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R1_press","title":"<code>on_R1_press()</code>  <code>async</code>","text":"<p>Function that is runned when R1 button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R1_press(self):\n\"\"\"\n    Function that is runned when R1 button is pressed\n    \"\"\"\n    print(\"on_R1_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R1_release","title":"<code>on_R1_release()</code>  <code>async</code>","text":"<p>Function that is runned when R1 button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R1_release(self):\n\"\"\"\n    Function that is runned when R1 button is released\n    \"\"\"\n    print(\"on_R1_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R2_press","title":"<code>on_R2_press(value)</code>  <code>async</code>","text":"<p>Function that is runned when R2 button is released</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The analog value of how hard the button is pressed.</p> required Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R2_press(self, value: int):\n\"\"\"\n    Function that is runned when R2 button is released\n\n    Args:\n        value: The analog value of how hard the button is pressed.\n    \"\"\"\n    print(f\"on_R2_press: {value}\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R2_release","title":"<code>on_R2_release()</code>  <code>async</code>","text":"<p>Function that is runned when R2 button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R2_release(self):\n\"\"\"\n    Function that is runned when R2 button is released\n    \"\"\"\n    print(\"on_R2_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R3_down","title":"<code>on_R3_down(value)</code>  <code>async</code>","text":"<p>Function that is runned when Right Joystick (R3) is pushed down</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The analog value of joystick that is pushed away from origin</p> required Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R3_down(self, value: int):\n\"\"\"\n    Function that is runned when Right Joystick (R3) is pushed down\n\n    Args:\n        value: The analog value of joystick that is pushed away from origin\n    \"\"\"\n    print(f\"on_R3_down: {value}\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R3_left","title":"<code>on_R3_left(value)</code>  <code>async</code>","text":"<p>Function that is runned when Right Joystick (R3) is pushed left</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The analog value of joystick that is pushed away from origin</p> required Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R3_left(self, value: int):\n\"\"\"\n    Function that is runned when Right Joystick (R3) is pushed left\n\n    Args:\n        value: The analog value of joystick that is pushed away from origin\n    \"\"\"\n    print(f\"on_R3_left: {value}\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R3_press","title":"<code>on_R3_press()</code>  <code>async</code>","text":"<p>Function that is runned when Right Joystick (R3) button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R3_press(self):\n\"\"\"\n    Function that is runned when Right Joystick (R3) button is pressed\n    \"\"\"\n    print(\"on_R3_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R3_release","title":"<code>on_R3_release()</code>  <code>async</code>","text":"<p>Function that is runned when Right Joystick (R3) button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R3_release(self):\n\"\"\"\n    Function that is runned when Right Joystick (R3) button is released\n    \"\"\"\n    print(\"on_R3_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R3_right","title":"<code>on_R3_right(value)</code>  <code>async</code>","text":"<p>Function that is runned when Right Joystick (R3) is pushed right</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The analog value of joystick that is pushed away from origin</p> required Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R3_right(self, value: int):\n\"\"\"\n    Function that is runned when Right Joystick (R3) is pushed right\n\n    Args:\n        value: The analog value of joystick that is pushed away from origin\n    \"\"\"\n    print(f\"on_R3_right: {value}\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R3_up","title":"<code>on_R3_up(value)</code>  <code>async</code>","text":"<p>Function that is runned when Right Joystick (R3) is pushed up</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The analog value of joystick that is pushed away from origin</p> required Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R3_up(self, value: int):\n\"\"\"\n    Function that is runned when Right Joystick (R3) is pushed up\n\n    Args:\n        value: The analog value of joystick that is pushed away from origin\n    \"\"\"\n    print(f\"on_R3_up: {value}\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R3_x_at_rest","title":"<code>on_R3_x_at_rest()</code>  <code>async</code>","text":"<p>Function that is runned when Right Joystick (R3) returns to the x-axis</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R3_x_at_rest(self):\n\"\"\"\n    Function that is runned when Right Joystick (R3) returns to the x-axis\n    \"\"\"\n    print(\"on_R3_x_at_rest\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_R3_y_at_rest","title":"<code>on_R3_y_at_rest()</code>  <code>async</code>","text":"<p>Function that is runned when Right Joystick (R3) returns to the y-axis</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_R3_y_at_rest(self):\n\"\"\"\n    Function that is runned when Right Joystick (R3) returns to the y-axis\n    \"\"\"\n    print(\"on_R3_y_at_rest\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_circle_press","title":"<code>on_circle_press()</code>  <code>async</code>","text":"<p>Function that is runned when circle button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_circle_press(self):\n\"\"\"\n    Function that is runned when circle button is pressed\n    \"\"\"\n    print(\"on_circle_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_circle_release","title":"<code>on_circle_release()</code>  <code>async</code>","text":"<p>Function that is runned when circle button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_circle_release(self):\n\"\"\"\n    Function that is runned when circle button is released\n    \"\"\"\n    print(\"on_circle_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_down_arrow_press","title":"<code>on_down_arrow_press()</code>  <code>async</code>","text":"<p>Function that is runned when Down button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_down_arrow_press(self):\n\"\"\"\n    Function that is runned when Down button is pressed\n    \"\"\"\n    print(\"on_down_arrow_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_left_arrow_press","title":"<code>on_left_arrow_press()</code>  <code>async</code>","text":"<p>Function that is runned when Left arrow button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_left_arrow_press(self):\n\"\"\"\n    Function that is runned when Left arrow button is pressed\n    \"\"\"\n    print(\"on_left_arrow_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_left_right_arrow_release","title":"<code>on_left_right_arrow_release()</code>  <code>async</code>","text":"<p>Function that is runned when button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_left_right_arrow_release(self):\n\"\"\"\n    Function that is runned when button is released\n    \"\"\"\n    print(\"on_left_right_arrow_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_options_press","title":"<code>on_options_press()</code>  <code>async</code>","text":"<p>Function that is runned when Options button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_options_press(self):\n\"\"\"\n    Function that is runned when Options button is pressed\n    \"\"\"\n    print(\"on_options_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_options_release","title":"<code>on_options_release()</code>  <code>async</code>","text":"<p>Function that is runned when Options button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_options_release(self):\n\"\"\"\n    Function that is runned when Options button is released\n    \"\"\"\n    print(\"on_options_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_playstation_button_press","title":"<code>on_playstation_button_press()</code>  <code>async</code>","text":"<p>Function that is runned when playstation button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_playstation_button_press(self):\n\"\"\"\n    Function that is runned when playstation button is pressed\n    \"\"\"\n    print(\"on_playstation_button_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_playstation_button_release","title":"<code>on_playstation_button_release()</code>  <code>async</code>","text":"<p>Function that is runned when playstation button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_playstation_button_release(self):\n\"\"\"\n    Function that is runned when playstation button is released\n    \"\"\"\n    print(\"on_playstation_button_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_right_arrow_press","title":"<code>on_right_arrow_press()</code>  <code>async</code>","text":"<p>Function that is runned when Right button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_right_arrow_press(self):\n\"\"\"\n    Function that is runned when Right button is pressed\n    \"\"\"\n    print(\"on_right_arrow_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_share_press","title":"<code>on_share_press()</code>  <code>async</code>","text":"<p>Function that is runned when share button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_share_press(self):\n\"\"\"\n    Function that is runned when share button is pressed\n    \"\"\"\n    print(\"on_share_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_share_release","title":"<code>on_share_release()</code>  <code>async</code>","text":"<p>Function that is runned when share button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_share_release(self):\n\"\"\"\n    Function that is runned when share button is released\n    \"\"\"\n    print(\"on_share_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_square_press","title":"<code>on_square_press()</code>  <code>async</code>","text":"<p>Function that is runned when square button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_square_press(self):\n\"\"\"\n    Function that is runned when square button is pressed\n    \"\"\"\n    print(\"on_square_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_square_release","title":"<code>on_square_release()</code>  <code>async</code>","text":"<p>Function that is runned when square button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_square_release(self):\n\"\"\"\n    Function that is runned when square button is released\n    \"\"\"\n    print(\"on_square_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_triangle_press","title":"<code>on_triangle_press()</code>  <code>async</code>","text":"<p>Function that is runned when triangle button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_triangle_press(self):\n\"\"\"\n    Function that is runned when triangle button is pressed\n    \"\"\"\n    print(\"on_triangle_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_triangle_release","title":"<code>on_triangle_release()</code>  <code>async</code>","text":"<p>Function that is runned when triangle button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_triangle_release(self):\n\"\"\"\n    Function that is runned when triangle button is released\n    \"\"\"\n    print(\"on_triangle_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_up_arrow_press","title":"<code>on_up_arrow_press()</code>  <code>async</code>","text":"<p>Function that is runned when Up button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_up_arrow_press(self):\n\"\"\"\n    Function that is runned when Up button is pressed\n    \"\"\"\n    print(\"on_up_arrow_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_up_down_arrow_release","title":"<code>on_up_down_arrow_release()</code>  <code>async</code>","text":"<p>Function that is runned when Up or Down arrow button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_up_down_arrow_release(self):\n\"\"\"\n    Function that is runned when Up or Down arrow button is released\n    \"\"\"\n    print(\"on_up_down_arrow_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_x_press","title":"<code>on_x_press()</code>  <code>async</code>","text":"<p>Function that is runned when x button is pressed</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_x_press(self):\n\"\"\"\n    Function that is runned when x button is pressed\n    \"\"\"\n    print(\"on_x_press\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.BaseController.on_x_release","title":"<code>on_x_release()</code>  <code>async</code>","text":"<p>Function that is runned when x button is released</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def on_x_release(self):\n\"\"\"\n    Function that is runned when x button is released\n    \"\"\"\n    print(\"on_x_release\")\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.Controller","title":"<code>Controller</code>","text":"<p>         Bases: <code>BaseController</code></p> <p>Initiate controller instance that is capable of listening to all events on specified input path</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path of where your PS4 is connected to (IE <code>/dev/input/js0</code>)</p> required <code>debug</code> <code>bool</code> <p>Enable Debug mode to print out some info</p> <code>False</code> <code>re_listen</code> <code>bool</code> <p>Will the joystick relisten after disconnect</p> <code>False</code> Note on <code>re_listen</code> <p>The <code>re_listen</code> will be <code>True</code> whenever you declare it in <code>listen</code> or when initiating it</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>class Controller(BaseController):\n\"\"\"\n    Initiate controller instance that is capable of listening to all events on specified input path\n\n    Args:\n        path: The path of where your PS4 is connected to (IE `/dev/input/js0`)\n        debug: Enable Debug mode to print out some info\n        re_listen: Will the joystick relisten after disconnect\n    ???+ note \"Note on `re_listen`\"\n        The `re_listen` will be `True` whenever you declare it in `listen` or when initiating it\n    \"\"\"\n\n    def __init__(\n        self,\n        path: str,\n        debug: bool = False,\n        re_listen: bool = False,\n    ):\n        BaseController.__init__(self)\n        self.is_connected: bool = False\n        self.path = path\n        self.debug = debug\n        self.re_listen = re_listen\n        self.event_mapping = PS4Mapping\n        self.event_format = \"3Bh2b\"\n        self.event_size = struct.calcsize(self.event_format)\n        self._file = None\n\n    async def connnection_check(\n        self,\n        timeout: int = 30,\n        connect_callback: Callable = None,\n        timeout_callback: Callable = None,\n    ):\n\"\"\"\n        Function to check for connection\n        Exits with exit code 1 when timeout unless `self.re_listen = True`\n        Args:\n            timeout: The time you want to wait for connection\n            connect_callback: User defined function to be runned when PS4 is connected\n            timeout_callback: User defined function to be runned when connection timeout\n        \"\"\"\n\n        def on_connect_callback():\n            self.is_connected = True\n            if connect_callback is not None:\n                connect_callback()\n\n        def on_timeout_callback():\n            print(f\"Timeout({timeout} sec). Interface not available.\")\n            if timeout_callback is not None:\n                timeout_callback()\n\n        print(f\"Waiting for path: {self.path} to become available . . .\")\n        seconds_past = 0\n        while seconds_past &lt; timeout:\n            if os.path.exists(self.path):\n                print(f\"Successfully bound to: {self.path}.\")\n                on_connect_callback()\n                return\n            seconds_past += 1\n            await asyncio.sleep(1)\n        on_timeout_callback()\n        if not self.re_listen:\n            exit(1)\n\n    async def listen(\n        self,\n        timeout=30,\n        connect_callback: Callable = None,\n        disconnect_callback: Callable = None,\n        timeout_callback: Callable = None,\n        re_listen: bool = False,\n    ):\n\"\"\"\n        Start listening for events on a given `self.path`\n        Exits with exit code 1 when timeout unless `self.re_listen = True`\n\n        Args:\n            timeout: The time you want to wait for connection.This allows you to start listening and connect your controller after running the script.\n            connect_callback: User defined function to be runned when PS4 is connected\n            disconnect_callback: User defined function to be runned when PS4 when connection is lost\n            timeout_callback: User defined function to be runned when connection timeout\n            re_listen: Will the joystick relisten after disconnect\n        \"\"\"\n        self.re_listen = self.re_listen or re_listen\n\n        def on_disconnect_callback():\n            self.is_connected = False\n            if disconnect_callback is not None:\n                disconnect_callback()\n\n        def unpack():\n            __event = struct.unpack(self.event_format, event)\n            return (__event[:3], __event[3], __event[4], __event[5])\n\n        await self.connnection_check(\n            timeout=timeout, connect_callback=connect_callback, timeout_callback=timeout_callback\n        )\n        if self.re_listen:\n            await self.re_connect()\n        try:\n            self._file = await aiofiles.open(self.path, \"rb\")\n            event = await self.read_events()\n            while event:\n                (header, value, button_type, button_id) = unpack()\n                self.__handle_event(\n                    button_id=button_id,\n                    button_type=button_type,\n                    value=value,\n                    header=header,\n                )\n                await asyncio.sleep(0)\n                event = await self.read_events()\n        except KeyboardInterrupt:\n            print(\"\\nExiting (Ctrl + C)\")\n            on_disconnect_callback()\n\n    async def re_connect(\n        self,\n        connect_callback: Callable = None,\n    ):\n\"\"\"\n        Reconnect to the `self.path` given\n        Args:\n            connect_callback: User defined function to be runned when PS4 is connected\n        \"\"\"\n\n        def on_connect_callback():\n            self.is_connected = True\n            if connect_callback is not None:\n                connect_callback()\n\n        print(f\"Reconnecting to {self.path}\")\n        while self.re_listen:\n            if os.path.exists(self.path):\n                print(f\"Successfully reconnected to: {self.path}.\")\n                on_connect_callback()\n                return\n            await asyncio.sleep(0)\n\n    def __handle_event(self, button_id, button_type, value, header):\n\"\"\"\n        Handles the event of buttons\n\n        Args:\n            button_id: ID of the button\n            button_type: Type of button\n            value: Analog value of button\n            header: The extra bytes of teh packet from joystick\n        \"\"\"\n        event = self.event_mapping(\n            button_id=button_id,\n            button_type=button_type,\n            value=value,\n            header=header,\n            debug=self.debug,\n        )\n        loop = asyncio.get_event_loop()\n        if event.R3_event():\n            if event.R3_y_at_rest():\n                loop.create_task(self.on_R3_y_at_rest())\n            if event.R3_x_at_rest():\n                loop.create_task(self.on_R3_x_at_rest())\n            if event.R3_right():\n                loop.create_task(self.on_R3_right(event.value))\n            if event.R3_left():\n                loop.create_task(self.on_R3_left(event.value))\n            if event.R3_up():\n                loop.create_task(self.on_R3_up(event.value))\n            if event.R3_down():\n                loop.create_task(self.on_R3_down(event.value))\n        if event.L3_event():\n            if event.L3_y_at_rest():\n                loop.create_task(self.on_L3_y_at_rest())\n            if event.L3_x_at_rest():\n                loop.create_task(self.on_L3_x_at_rest())\n            if event.L3_up():\n                loop.create_task(self.on_L3_up(event.value))\n            if event.L3_down():\n                loop.create_task(self.on_L3_down(event.value))\n            if event.L3_left():\n                loop.create_task(self.on_L3_left(event.value))\n            if event.L3_right():\n                loop.create_task(self.on_L3_right(event.value))\n        if event.circle_pressed():\n            loop.create_task(self.on_circle_press())\n        if event.circle_released():\n            loop.create_task(self.on_circle_release())\n        if event.x_pressed():\n            loop.create_task(self.on_x_press())\n        if event.x_released():\n            loop.create_task(self.on_x_release())\n        if event.triangle_pressed():\n            loop.create_task(self.on_triangle_press())\n        if event.triangle_released():\n            loop.create_task(self.on_triangle_release())\n        if event.square_pressed():\n            loop.create_task(self.on_square_press())\n        if event.square_released():\n            loop.create_task(self.on_square_release())\n        if event.L1_pressed():\n            loop.create_task(self.on_L1_press())\n        if event.L1_released():\n            loop.create_task(self.on_L1_release())\n        if event.L2_pressed():\n            loop.create_task(self.on_L2_press(event.value))\n        if event.L2_released():\n            loop.create_task(self.on_L2_release())\n        if event.R1_pressed():\n            loop.create_task(self.on_R1_press())\n        if event.R1_released():\n            loop.create_task(self.on_R1_release())\n        if event.R2_pressed():\n            loop.create_task(self.on_R2_press(event.value))\n        if event.R2_released():\n            loop.create_task(self.on_R2_release())\n        if event.options_pressed():\n            loop.create_task(self.on_options_press())\n        if event.options_released():\n            loop.create_task(self.on_options_release())\n        if event.left_right_arrow_released():\n            loop.create_task(self.on_left_right_arrow_release())\n        if event.up_down_arrow_released():\n            loop.create_task(self.on_up_down_arrow_release())\n        if event.left_arrow_pressed():\n            loop.create_task(self.on_left_arrow_press())\n        if event.right_arrow_pressed():\n            loop.create_task(self.on_right_arrow_press())\n        if event.up_arrow_pressed():\n            loop.create_task(self.on_up_arrow_press())\n        if event.down_arrow_pressed():\n            loop.create_task(self.on_down_arrow_press())\n        if event.playstation_button_pressed():\n            loop.create_task(self.on_playstation_button_press())\n        if event.playstation_button_released():\n            loop.create_task(self.on_playstation_button_release())\n        if event.share_pressed():\n            loop.create_task(self.on_share_press())\n        if event.share_released():\n            loop.create_task(self.on_share_release())\n        if event.R3_pressed():\n            loop.create_task(self.on_R3_press())\n        if event.R3_released():\n            loop.create_task(self.on_R3_release())\n        if event.L3_pressed():\n            loop.create_task(self.on_L3_press())\n        if event.L3_released():\n            loop.create_task(self.on_L3_release())\n\n    async def read_events(self):\n\"\"\"\n        The loop function to read for events\n        \"\"\"\n        try:\n            return await self._file.read(self.event_size)\n        except IOError:\n            print(\"Interface lost. Device disconnected?\")\n            if self.re_listen:\n                await self.re_connect()\n                await asyncio.sleep(1)\n                self._file = await aiofiles.open(self.path, \"rb\")\n                return await self.read_events()\n            exit(1)\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.Controller.connnection_check","title":"<code>connnection_check(timeout=30, connect_callback=None, timeout_callback=None)</code>  <code>async</code>","text":"<p>Function to check for connection Exits with exit code 1 when timeout unless <code>self.re_listen = True</code></p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>The time you want to wait for connection</p> <code>30</code> <code>connect_callback</code> <code>Callable</code> <p>User defined function to be runned when PS4 is connected</p> <code>None</code> <code>timeout_callback</code> <code>Callable</code> <p>User defined function to be runned when connection timeout</p> <code>None</code> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def connnection_check(\n    self,\n    timeout: int = 30,\n    connect_callback: Callable = None,\n    timeout_callback: Callable = None,\n):\n\"\"\"\n    Function to check for connection\n    Exits with exit code 1 when timeout unless `self.re_listen = True`\n    Args:\n        timeout: The time you want to wait for connection\n        connect_callback: User defined function to be runned when PS4 is connected\n        timeout_callback: User defined function to be runned when connection timeout\n    \"\"\"\n\n    def on_connect_callback():\n        self.is_connected = True\n        if connect_callback is not None:\n            connect_callback()\n\n    def on_timeout_callback():\n        print(f\"Timeout({timeout} sec). Interface not available.\")\n        if timeout_callback is not None:\n            timeout_callback()\n\n    print(f\"Waiting for path: {self.path} to become available . . .\")\n    seconds_past = 0\n    while seconds_past &lt; timeout:\n        if os.path.exists(self.path):\n            print(f\"Successfully bound to: {self.path}.\")\n            on_connect_callback()\n            return\n        seconds_past += 1\n        await asyncio.sleep(1)\n    on_timeout_callback()\n    if not self.re_listen:\n        exit(1)\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.Controller.listen","title":"<code>listen(timeout=30, connect_callback=None, disconnect_callback=None, timeout_callback=None, re_listen=False)</code>  <code>async</code>","text":"<p>Start listening for events on a given <code>self.path</code> Exits with exit code 1 when timeout unless <code>self.re_listen = True</code></p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <p>The time you want to wait for connection.This allows you to start listening and connect your controller after running the script.</p> <code>30</code> <code>connect_callback</code> <code>Callable</code> <p>User defined function to be runned when PS4 is connected</p> <code>None</code> <code>disconnect_callback</code> <code>Callable</code> <p>User defined function to be runned when PS4 when connection is lost</p> <code>None</code> <code>timeout_callback</code> <code>Callable</code> <p>User defined function to be runned when connection timeout</p> <code>None</code> <code>re_listen</code> <code>bool</code> <p>Will the joystick relisten after disconnect</p> <code>False</code> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def listen(\n    self,\n    timeout=30,\n    connect_callback: Callable = None,\n    disconnect_callback: Callable = None,\n    timeout_callback: Callable = None,\n    re_listen: bool = False,\n):\n\"\"\"\n    Start listening for events on a given `self.path`\n    Exits with exit code 1 when timeout unless `self.re_listen = True`\n\n    Args:\n        timeout: The time you want to wait for connection.This allows you to start listening and connect your controller after running the script.\n        connect_callback: User defined function to be runned when PS4 is connected\n        disconnect_callback: User defined function to be runned when PS4 when connection is lost\n        timeout_callback: User defined function to be runned when connection timeout\n        re_listen: Will the joystick relisten after disconnect\n    \"\"\"\n    self.re_listen = self.re_listen or re_listen\n\n    def on_disconnect_callback():\n        self.is_connected = False\n        if disconnect_callback is not None:\n            disconnect_callback()\n\n    def unpack():\n        __event = struct.unpack(self.event_format, event)\n        return (__event[:3], __event[3], __event[4], __event[5])\n\n    await self.connnection_check(\n        timeout=timeout, connect_callback=connect_callback, timeout_callback=timeout_callback\n    )\n    if self.re_listen:\n        await self.re_connect()\n    try:\n        self._file = await aiofiles.open(self.path, \"rb\")\n        event = await self.read_events()\n        while event:\n            (header, value, button_type, button_id) = unpack()\n            self.__handle_event(\n                button_id=button_id,\n                button_type=button_type,\n                value=value,\n                header=header,\n            )\n            await asyncio.sleep(0)\n            event = await self.read_events()\n    except KeyboardInterrupt:\n        print(\"\\nExiting (Ctrl + C)\")\n        on_disconnect_callback()\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.Controller.re_connect","title":"<code>re_connect(connect_callback=None)</code>  <code>async</code>","text":"<p>Reconnect to the <code>self.path</code> given</p> <p>Parameters:</p> Name Type Description Default <code>connect_callback</code> <code>Callable</code> <p>User defined function to be runned when PS4 is connected</p> <code>None</code> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def re_connect(\n    self,\n    connect_callback: Callable = None,\n):\n\"\"\"\n    Reconnect to the `self.path` given\n    Args:\n        connect_callback: User defined function to be runned when PS4 is connected\n    \"\"\"\n\n    def on_connect_callback():\n        self.is_connected = True\n        if connect_callback is not None:\n            connect_callback()\n\n    print(f\"Reconnecting to {self.path}\")\n    while self.re_listen:\n        if os.path.exists(self.path):\n            print(f\"Successfully reconnected to: {self.path}.\")\n            on_connect_callback()\n            return\n        await asyncio.sleep(0)\n</code></pre>"},{"location":"API%20Refrences/API%20Refrences/Controller/#AsynchronousPS4Controller.Controller.Controller.read_events","title":"<code>read_events()</code>  <code>async</code>","text":"<p>The loop function to read for events</p> Source code in <code>AsynchronousPS4Controller/Controller.py</code> <pre><code>async def read_events(self):\n\"\"\"\n    The loop function to read for events\n    \"\"\"\n    try:\n        return await self._file.read(self.event_size)\n    except IOError:\n        print(\"Interface lost. Device disconnected?\")\n        if self.re_listen:\n            await self.re_connect()\n            await asyncio.sleep(1)\n            self._file = await aiofiles.open(self.path, \"rb\")\n            return await self.read_events()\n        exit(1)\n</code></pre>"},{"location":"Guides/01%20Getting%20Started/","title":"Introduction","text":"<p>Ready to get your Python on and create a PS4 project? This guide's got you covered with installation options and a basic project code example.</p>"},{"location":"Guides/01%20Getting%20Started/#requirements","title":"Requirements","text":"<ul> <li> Python 3.9 or greater</li> <li> Know how to use <code>pip</code></li> <li> PS4 Controllers</li> <li> A Linux System</li> </ul>"},{"location":"Guides/01%20Getting%20Started/#installation-methods","title":"Installation Methods","text":"Manual Installation <p>Congratulations! You now have a basic understanding of this library. If you have any questions check out our other guides</p> <p>For more examples, check out the examples page</p>"},{"location":"Guides/01%20Getting%20Started/#virtual-environments","title":"Virtual-Environments","text":"<p>I strongly recommend that you make use of Virtual Environments when working on any project. This means that each project will have its own libraries of any version and does not affect anything else on your system. Don't worry, this isn't setting up a full-fledged virtual machine, just small python environment.</p>  Linux <pre><code>cd \"[your project directory]\"\npython3 -m venv venv\nsource venv/bin/activate\n</code></pre> <p>It's that simple, now you're using a virtual environment. If you want to leave the environment just type <code>deactivate</code>. If you want to learn more about the virtual environments, check out this page</p>"},{"location":"Guides/01%20Getting%20Started/#pip-install","title":"Pip install","text":"<p>Now let's get the library installed.</p>  Linux <pre><code>python3 -m pip install AsynchronousPS4Controller\n</code></pre>"},{"location":"Guides/01%20Getting%20Started/#basic-project","title":"Basic Project","text":"<p>Now let's get a basic project going, for your code, you'll want something like this:</p> <pre><code>import asyncio\nfrom AsynchronousPS4Controller import Controller\n\ncontroller = Controller(path=\"/dev/input/js0\")\n# you can start listening before controller is paired, as long as you pair it within the timeout window\nasyncio.run(controller.listen(timeout=30))\n</code></pre> <p>You can choose to connect your PS4 Controller either before or after you start the code.On how to connect , check out this page</p>"},{"location":"Guides/02%20PS4%20Views/","title":"PS4 Views","text":""},{"location":"Guides/02%20PS4%20Views/#led-view-of-the-ps4","title":"LED View of the PS4","text":"<p>The view where L1, L2, R1, R2 buttons are located.</p> Note <p>The L2 buttons and R2 buttons are analog buttons so their callback is slightly different</p> <p></p>"},{"location":"Guides/02%20PS4%20Views/#top-view-of-ps4","title":"Top View of PS4","text":"Note <p>The joysticks are called L3 and R3 based on PS4 own convention.</p> Note <p>The arrow buttons comes in pairs when it is untriggered it is unable to be differentiated. So the callbacks are <code>on_up_down_arrow_release</code> and <code>on_left_right_arrow_release</code> respectively</p> <p></p>"},{"location":"Guides/10%20%20Hardware%20Connection/","title":"Hardware Connection","text":"BlueTooth ConnectionWired Connection First time ConnectionReconnect from last Usage <ol> <li>Hold the Share Button.</li> <li>Hold the Playstation Button, the LED will blink rapidly.</li> <li>Open bluetooth Settings and add Device.</li> <li>When the device is connected the LED will remain turned on.</li> </ol> <ol> <li>Hold the PlayStation Button</li> <li>The LED wil blink at a slower pace than first time connection</li> <li>When the device is connected the LED will remain turned on.</li> </ol> <ol> <li>Use a USB to Micro USB to connect the PS4 to your device.</li> <li>The LED on the Controller will light up.</li> </ol> <p>Check which interface it has been connected at <code>/dev/input</code> via <code>ls /dev/input/ | grep js</code> command in command line.</p> <p>When you connect a new device, there should be a entry and it usually starts at <code>js0</code>. The more controllers/joysticks are connected the more <code>jsN</code> interfaces you will see.</p> Note <p>Usually <code>js0</code>, <code>js1</code>, <code>js2</code> will have a Blue ,Red, Green LED respectively</p>"},{"location":"Guides/20%20Custom%20Controller%20Callbacks/","title":"Custom Controller Callbacks","text":"<p>This library is usually used by overwriting the button and Joystick callbacks</p> Note <p>The joysticks are called L3 and R3 based on PS4 own convention.</p> Note <p>Analog Button Events are those Joystick moving, L2 press, R2 press events.</p>"},{"location":"Guides/20%20Custom%20Controller%20Callbacks/#setup","title":"Setup","text":"<p>Overwriting usually uses the concept of inheritance. For example, this is a valid way of setting up:</p> <pre><code>import asyncio\nfrom AsynchronousPS4Controller import Controller\n\nclass MyController(Controller):\n     def __init__(self, **kwargs):\n        Controller.__init__(self, **kwargs)\n</code></pre>"},{"location":"Guides/20%20Custom%20Controller%20Callbacks/#overwriting-digital-button-events","title":"Overwriting Digital Button Events","text":"<p>You probably want your program to do more than that. For example, you want your program to print <code>Hello world</code> and <code>Goodbye World</code> when the <code>X</code> button is pressed and released respectively. The code look like this: <pre><code>import asyncio\nfrom AsynchronousPS4Controller import Controller\n\nclass MyController(Controller):\n    def __init__(self, **kwargs):\n        Controller.__init__(self, **kwargs)\n\n    async def on_x_press(self):\n        print(\"Hello world\")\n\n    async def on_x_release(self):\n        print(\"Goodbye world\")\n\ncontroller = MyController(path=\"/dev/input/js0\")\nasyncio.run(controller.listen(timeout=30))\n</code></pre></p> Note <p>The Joysticks are Buttons. You can press them and invoke some certain events.</p> <p>For Example, you are making an object move in your UI with the direction keys you can make it work like this: <pre><code>import asyncio\nfrom AsynchronousPS4Controller import Controller\n\nclass MyController(Controller):\n    def __init__(self, **kwargs):\n        Controller.__init__(self, **kwargs)\n\n    async def on_up_arrow_press(self):\n        # Some function of your UI to move up\n        UI_move_up()\n\n    async def on_up_down_arrow_release(self):\n        # Some function of your UI to stop moving\n        UI_stop_move()\n\n\n    async def on_down_arrow_press(self):\n        # Some function of your UI to move down\n        UI_move_down()\n\ncontroller = MyController(path=\"/dev/input/js0\")\nasyncio.run(controller.listen(timeout=30))\n</code></pre></p> Note <p>The arrow buttons comes in pairs when it is untriggered it is unable to be differentiated. So the callbacks are <code>on_up_down_arrow_release</code> and <code>on_left_right_arrow_release</code> respectively.</p>"},{"location":"Guides/20%20Custom%20Controller%20Callbacks/#list-of-digital-button-events","title":"List of Digital Button Events","text":"<ul> <li><code>on_x_press</code></li> <li><code>on_x_release</code></li> <li><code>on_triangle_press</code></li> <li><code>on_triangle_release</code></li> <li><code>on_circle_press</code></li> <li><code>on_circle_release</code></li> <li><code>on_square_press</code></li> <li><code>on_square_release</code></li> <li><code>on_L1_press</code></li> <li><code>on_L1_release</code></li> <li><code>on_L2_release</code></li> <li><code>on_R1_press</code></li> <li><code>on_R1_release</code></li> <li><code>on_R2_release</code></li> <li><code>on_up_arrow_press</code></li> <li><code>on_up_down_arrow_release</code></li> <li><code>on_down_arrow_press</code></li> <li><code>on_left_arrow_press</code></li> <li><code>on_left_right_arrow_release</code></li> <li><code>on_right_arrow_press</code></li> <li><code>on_L3_x_at_rest</code></li> <li><code>on_L3_y_at_rest</code></li> <li><code>on_L3_press</code></li> <li><code>on_L3_release</code></li> <li><code>on_R3_x_at_rest</code></li> <li><code>on_R3_y_at_rest</code></li> <li><code>on_R3_press</code></li> <li><code>on_R3_release</code></li> <li><code>on_options_press</code></li> <li><code>on_options_release</code></li> <li><code>on_share_press</code></li> <li><code>on_share_release</code></li> <li><code>on_playstation_button_press</code></li> <li><code>on_playstation_button_release</code></li> </ul>"},{"location":"Guides/20%20Custom%20Controller%20Callbacks/#overwriting-analog-events","title":"Overwriting Analog Events","text":"<p>Overwriting Analog events is similar to how Digital Button Events. They just need an extra argument. For example: <pre><code>import asyncio\nfrom AsynchronousPS4Controller import Controller\n\nclass MyController(Controller):\n    def __init__(self, **kwargs):\n        Controller.__init__(self, **kwargs)\n\n    async def on_L3_up(self,value:int):\n        print(f\"Left Joystick has been pushed up by a value of {value}\")\n\n    async def on_L3_down(self,value:int):\n        print(f\"Left Joystick has been pushed down by a value of {value}\")\n\ncontroller = MyController(path=\"/dev/input/js0\")\nasyncio.run(controller.listen(timeout=30))\n</code></pre></p>"},{"location":"Guides/20%20Custom%20Controller%20Callbacks/#list-of-analog-events","title":"List of analog events","text":"<ul> <li><code>on_L2_press</code></li> <li><code>on_R2_press</code></li> <li><code>on_L3_up</code></li> <li><code>on_L3_down</code></li> <li><code>on_L3_left</code></li> <li><code>on_L3_right</code></li> <li><code>on_R3_up</code></li> <li><code>on_R3_down</code></li> <li><code>on_R3_left</code></li> <li><code>on_R3_right</code></li> </ul>"},{"location":"Guides/30%20Examples/","title":"Examples","text":""},{"location":"Guides/30%20Examples/#mainpy","title":"<code>main.py</code>","text":"<pre><code>import asyncio\nfrom AsynchronousPS4Controller import Controller\n\ncontroller = Controller(path=\"/dev/input/js0\")\n\n# you can start listening before controller is paired, as long as you pair it within the timeout window\nasyncio.run(controller.listen(timeout=30))\n</code></pre>"},{"location":"Guides/30%20Examples/#custom_controllerpy","title":"<code>custom_controller.py</code>","text":"<p>This code shows how you can have your customize what each button press or Joystick movement invokes <pre><code>import asyncio\nfrom AsynchronousPS4Controller import Controller\n\nclass MyController(Controller):\n    def __init__(self, **kwargs):\n        Controller.__init__(self, **kwargs)\n\n    async def on_x_press(self):\n        print(\"Hello world\")\n\n    async def on_x_release(self):\n        print(\"Goodbye world\")\n\n    async def on_L3_up(self,value:int):\n        print(f\"Left Joystick has been pushed up by a value of {value}\")\n\n    async def on_L3_down(self,value:int):\n        print(f\"Left Joystick has been pushed down by a value of {value}\")\n\ncontroller = MyController(path=\"/dev/input/js0\")\n\n# you can start listening before controller is paired, as long as you pair it within the timeout window\nasyncio.run(controller.listen(timeout=30))\n</code></pre></p>"},{"location":"Guides/30%20Examples/#custom_event_callbackpy","title":"<code>custom_event_callback.py</code>","text":"<pre><code>import asyncio\nfrom AsynchronousPS4Controller import Controller\n\ndef on_connect():\n    print(\"I just connected\")\n\ndef on_disconnect():\n    print(\"I just disconnected\")\n\ndef on_timeout():\n    print(\"Timeout for waiting this controller\")\n\nclass MyController(Controller):\n\n    def __init__(self, **kwargs):\n        Controller.__init__(self, **kwargs)\n\n\ncontroller = MyController(interface=\"/dev/input/js0\")\nasyncio.run(\n    controller.listen(timeout=30,connect_callback=on_connect, disconnect_callback=on_disconnect,timeout_callback=on_timeout\n    )\n)\n</code></pre>"},{"location":"Guides/30%20Examples/#dual_controllerpy","title":"<code>dual_controller.py</code>","text":"<pre><code>import asyncio\nfrom AsynchronousPS4Controller import Controller\n\nclass MyController(Controller):\n\n    def __init__(self, **kwargs):\n        super().__init__(self, **kwargs)\n\n    async def on_x_press(self):\n        print(\"Hello\")\n\n    async def on_x_release(self):\n        print(\"Goodbye\")\n\nclass MyController2(Controller):\n    def __init__(self, **kwargs):\n        super().__init__(self, **kwargs)\n\n    async def on_x_press(self):\n            print(\"2nd Controller X Press\")\n\n    async def on_x_release(self):\n            print(\"2nd Controller X Release\")\n\ncontroller1 = MyController(path=\"/dev/input/js0\",re_listen=True)\ncontroller2 = MyController2(path=\"/dev/input/js1\",re_listen=True)\n\nloop = asyncio.get_event_loop()\ntask_1= loop.create_task(controller1.listen())\ntask_2= loop.create_task(controller2.listen())\ngathered = asyncio.gather(task_1,task_2)\nloop.run_until_complete(gathered)\n</code></pre>"}]}